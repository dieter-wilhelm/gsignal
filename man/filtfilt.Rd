% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/filtfilt.R
\name{filtfilt}
\alias{filtfilt}
\alias{filtfilt.default}
\alias{filtfilt.Arma}
\alias{filtfilt.Ma}
\alias{filtfilt.Sos}
\alias{filtfilt.Zpg}
\title{Zero-phase digital filtering}
\usage{
filtfilt(filt, ...)

\method{filtfilt}{default}(filt, a, x, ...)

\method{filtfilt}{Arma}(filt, x, ...)

\method{filtfilt}{Ma}(filt, x, ...)

\method{filtfilt}{Sos}(filt, x, ...)

\method{filtfilt}{Zpg}(filt, x, ...)
}
\arguments{
\item{filt}{For the default case, the moving-average coefficients of an ARMA
filter (normally called ‘b’). Generically, \code{filt} specifies an arbitrary
filter operation.}

\item{...}{additional arguments (ignored).}

\item{a}{the autoregressive (recursive) coefficients of an ARMA filter.}

\item{x}{the input signal to be filtered. If \code{x} is a matrix, all
coulums are filtered.}
}
\value{
The filtered signal, normally of the same length of the input signal
  \code{x}, returned as a vector or matrix
}
\description{
Forward and reverse filter the signal.
}
\details{
Forward and reverse filtering the signal corrects for phase distortion
introduced by a one-pass filter, though it does square the magnitude response
in the process. That’s the theory at least. In practice the phase correction
is not perfect, and magnitude response is distorted, particularly in the stop
band.

In Matlab filtfilt reduces filter startup transients by carefully choosing
initial conditions, and by prepending onto the input sequence a short,
reflected piece of the input sequence. The current (1.4.1) Octave version
uses a slightly different method to choose initial conditions. Neither of
these methods have been implemented in the current version. Here, a reflected
sequence of the input signal is added to the beginning and end of the signal,
and tapered to zero, as per the recommendations on the Matlab website. This
is different from the current (0.7-6) R signal package, which pads the input
signal with zeroes.
}
\examples{
bf <- butter(3, 0.1)                                # 10 Hz low-pass filter
t <- seq(0, 1, len = 100)                            # 1 second sample
x <- sin(2* pi * t * 2.3) + 0.25 * rnorm(length(t))  # 2.3 Hz sinusoid+noise
z <- filter(bf, x)                                   # apply filter
plot(t, x, type = "l")
lines(t, z, col = "red")
zz <- filtfilt(bf, x)
lines(t, zz, col="blue")
legend("bottomleft", legend = c("original", "filter", "filtfilt"), lty = 1,
 col = c("black", "red", "blue"))

}
\seealso{
\code{\link{filter}}
}
\author{
Paul Kienzle, \email{pkienzle@users.sf.net},\cr
 Francesco Potortì, \email{pot@gnu.org},\cr
 Luca Citi, \email{lciti@essex.ac.uk}.\cr
 Conversion to R by Geert van Boxtel \email{G.J.M.vanBoxtel@gmail.com}.
}
